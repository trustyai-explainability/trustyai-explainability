#!/bin/bash

# Change this if your project is not named opendatahub
export ODHPROJECT=${ODHPROJECT:-"opendatahub"}

millisecond=1
second=$(( 1000 * millisecond ))
minute=$(( 60 * second ))
fiveminute=$(( 300 * second ))
odhdefaulttimeout=$(( 1200 * second ))
odhdefaultinterval=$(( 10 ))

function header() {
    os::text::print_blue $1
}

function curl_prom_token() {
  SECRET=`oc get secret -n openshift-user-workload-monitoring | grep  prometheus-user-workload-token | head -n 1 | awk '{print $1 }'` || eval "$FAILURE_HANDLING"
  TOKEN=`echo $(oc get secret $SECRET -n openshift-user-workload-monitoring -o json | jq -r '.data.token') | base64 -d` || eval "$FAILURE_HANDLING"
  THANOS_QUERIER_HOST=`oc get route thanos-querier -n openshift-monitoring -o json | jq -r '.spec.host'` || eval "$FAILURE_HANDLING"
  curl -H "Authorization: Bearer ${TOKEN}" -X GET -kG "https://$THANOS_QUERIER_HOST/api/v1/query?" --data-urlencode "$@"
}

# Function to add the Authorization token to curl commands
function curl_trustyai_token() {
    oc apply -f ${RESOURCEDIR}/modelmesh/service_account.yaml -n ${MM_NAMESPACE} >/dev/null
    TOKEN=$(oc create token user-one -n ${MM_NAMESPACE}) || eval "$FAILURE_HANDLING"
    curl -H "Authorization: Bearer ${TOKEN}"  "$@"
}

function curl_trustyai_token_with_ns() {
    NAMESPACE=$1
    shift
    oc apply -f ${RESOURCEDIR}/modelmesh/service_account.yaml -n ${NAMESPACE} >/dev/null
    TOKEN=$(oc create token user-one -n ${NAMESPACE}) || eval "$FAILURE_HANDLING"
    curl -H "Authorization: Bearer ${TOKEN}" "${@}"
}

function curl_model_token() {
  token=$(oc create token user-one -n ${MM_NAMESPACE}) || eval "$FAILURE_HANDLING"
  curl -H "Authorization: Bearer ${token}" "$@"
}

function curl_model_token_with_ns() {
  NAMESPACE=$1
  shift
  token=$(oc create token user-one -n ${NAMESPACE}) || eval "$FAILURE_HANDLING"
  curl -H "Authorization: Bearer ${token}" "${@}"
}