#! /bin/bash

LOOP_IDX=0
NFILES=$(cat $1 | jq 'length')
THRESHOLD="${2:-$NFILES}"
BATCH_SIZE=500
PAUSE_TIME=0.01

MODEL_ALPHA=demo-loan-nn-onnx-alpha
MODEL_BETA=demo-loan-nn-onnx-beta

ODHPROJECT=opendatahub
MM_NAMESPACE=opendatahub-model

oc project $MM_NAMESPACE 2>&1 1>/dev/null
TRUSTY_POD=$(oc get pods -o name | grep trustyai-service)

INFER_ROUTE_ALPHA=$(oc get route demo-loan-nn-onnx-alpha --template={{.spec.host}}{{.spec.path}})
INFER_ROUTE_BETA=$(oc get route demo-loan-nn-onnx-beta --template={{.spec.host}}{{.spec.path}})

check_for_reception () {
  CHECKS=0
  THRESHOLD=${3:-950}
  MAX_RETRIES=${4:-5}
  while true
  do
    THRESH=$(( $1 * $THRESHOLD / 1000 ))
    N_OBS=$(get_counter "$2")
    echo -ne "\r - Making sure TrustyAI $2 dataset contains at least $THRESH points, has $N_OBS (tried $CHECKS times)";
    if [ $CHECKS -ge $MAX_RETRIES ]; then
      echo -e "\033[0;31m [timeout]\033[0m"
      exit 1
    elif [ $N_OBS -gt $THRESH ]; then
      break
    else
      ((CHECKS=CHECKS+1))
      sleep 1
    fi
  done
  echo -e "\033[0;32m [done]\033[0m"
}

get_counter () {
  FILE_PRESENT=$(oc exec $TRUSTY_POD -c trustyai-service -- bash -c "ls /inputs/ | grep $1 || echo ''")
  if [[ -z $FILE_PRESENT ]]; then
    echo 0
  else
    echo $(oc exec $TRUSTY_POD -c trustyai-service -- bash -c "cat /inputs/$1-metadata.json"  | jq .observations)
  fi
}

# Init dataset counters
START_OBS_ALPHA=$(get_counter $MODEL_ALPHA)
echo "$START_OBS_ALPHA datapoints already in ALPHA dataset"

START_OBS_BETA=$(get_counter $MODEL_BETA)
echo "$START_OBS_BETA datapoints already in BETA dataset"


# ========
# this script is useful for sending many inferences one-by-one, so is preserved below
# ========
#for data in $(cat $1 | jq -c '.[]')
#do
#  if [ $(($LOOP_IDX % $BATCH_SIZE)) -eq 0 ] && [ $LOOP_IDX -gt 0 ]; then
#    echo
#    check_for_reception $(( $LOOP_IDX + $START_OBS_ALPHA )) $MODEL_ALPHA
#    check_for_reception $(( $LOOP_IDX + $START_OBS_BETA )) $MODEL_BETA
#  fi
#
#  echo -ne "\rSent datapoint $(( $LOOP_IDX + 1 )) of $THRESHOLD"
#  curl -k https://$INFER_ROUTE_ALPHA/infer -d $data > /dev/null 2>&1  &
#  curl -k https://$INFER_ROUTE_BETA/infer -d $data > /dev/null 2>&1  &
#
#  sleep $PAUSE_TIME
#
#  if [[ "$LOOP_IDX" -ge $(( $THRESHOLD - 1 )) ]]; then
#    echo -e "\nAll datapoints sent"
#    break
#  fi
#
#  let "LOOP_IDX++"
#done
# ========

# batched version of the scr
TRIES=0
SUCCESS_ALPHA=false
SUCCESS_BETA=false

while [ "$SUCCESS_ALPHA" != true ] || [ "$SUCCESS_BETA" != true ]; do
  if [ $TRIES -gt 4 ]; then
    echo -e "\n\033[0;31mERROR: Send data batch timeout\033[0m"
    exit 1
  else
    echo "Data batch transmission (ATTEMPT $TRIES)"
  fi

  if [ "$SUCCESS_ALPHA" != true ]; then
    curl -k https://$INFER_ROUTE_ALPHA/infer -d @$1 > /dev/null 2>&1
    ( check_for_reception $(( $(jq '.inputs[0].data | length' $1) + $START_OBS_ALPHA )) $MODEL_ALPHA; ) && SUCCESS_ALPHA=true
  fi;

  if [ "$SUCCESS_BETA" != true ]; then
    curl -k https://$INFER_ROUTE_BETA/infer -d @$1 > /dev/null 2>&1
    ( check_for_reception $(( $(jq '.inputs[0].data | length' $1) + $START_OBS_BETA )) $MODEL_BETA; ) && SUCCESS_BETA=true
  fi;

  ((TRIES=TRIES+1))
done
