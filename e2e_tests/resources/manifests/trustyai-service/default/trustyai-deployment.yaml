---
apiVersion: v1
kind: Service
metadata:
  annotations:
    app.openshift.io/vcs-url: <<unknown>>
    app.quarkus.io/commit-id: 0acbb40970b5c0dd7e5a50966d6b3d68e137be10
    app.quarkus.io/build-timestamp: 2023-02-24 - 13:56:14 +0000
    prometheus.io/scrape: "true"
    prometheus.io/path: /q/metrics
    prometheus.io/port: "8080"
    prometheus.io/scheme: http
    service.alpha.openshift.io/serving-cert-secret-name: trustyai-service-proxy-tls
  labels:
    app.kubernetes.io/name: trustyai-service
    app.kubernetes.io/version: 0.1.0
    app.openshift.io/runtime: quarkus
  name: trustyai-service
spec:
  ports:
    - name: http
      port: 80
      targetPort: 8080
  selector:
    app.kubernetes.io/name: trustyai-service
    app.kubernetes.io/version: 0.1.0
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    app.openshift.io/vcs-url: <<unknown>>
    app.quarkus.io/commit-id: ea73183a2c1b81bd9afe31005644d374b5bdeb34
    app.quarkus.io/build-timestamp: 2023-02-15 - 15:41:47 +0000
    prometheus.io/scrape: "true"
    prometheus.io/path: /q/metrics
    prometheus.io/port: "8080"
    prometheus.io/scheme: http
  labels:
    app.openshift.io/runtime: quarkus
    app.kubernetes.io/version: 0.1.0
    app.kubernetes.io/name: trustyai-service
    app.kubernetes.io/version: 0.1.0
    app.openshift.io/runtime: quarkus
  name: trustyai-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/version: 0.1.0
      app.kubernetes.io/name: trustyai-service
  template:
    metadata:
      annotations:
        app.openshift.io/vcs-url: <<unknown>>
        app.quarkus.io/commit-id: ea73183a2c1b81bd9afe31005644d374b5bdeb34
        app.quarkus.io/build-timestamp: 2023-02-15 - 15:41:47 +0000
        prometheus.io/scrape: "true"
        prometheus.io/path: /q/metrics
        prometheus.io/port: "8080"
        prometheus.io/scheme: http
      labels:
        app.openshift.io/runtime: quarkus
        app.kubernetes.io/version: 0.1.0
        app.kubernetes.io/name: trustyai-service
    spec:
      initContainers:
        - name: config-map-overrider
          image: registry.redhat.io/openshift4/ose-cli@sha256:25fef269ac6e7491cb8340119a9b473acbeb53bc6970ad029fdaae59c3d0ca61
          command: [ "/bin/bash", "-c", "--" ]
          args:
            - |
              # ugly hack: write a configmap that knows its own namespace
              echo "apiVersion: v1" > /tmp/model-serving-config.yaml
              echo "kind: ConfigMap" >> /tmp/model-serving-config.yaml
              echo "metadata:" >> /tmp/model-serving-config.yaml
              echo "  name: model-serving-config" >> /tmp/model-serving-config.yaml
              echo "data:" >> /tmp/model-serving-config.yaml
              echo "  config.yaml: |" >> /tmp/model-serving-config.yaml
              
              current_namespace=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
              
              echo "    payloadProcessors: "http://trustyai-service.$current_namespace/consumer/kserve/v2"" >> /tmp/model-serving-config.yaml
              cat /tmp/model-serving-config.yaml
              oc apply -f /tmp/model-serving-config.yaml
              exit 0
      containers:
        - env:
            - name: STORAGE_DATA_FILENAME
              valueFrom:
                configMapKeyRef:
                  key: storage_data_filename
                  name: trustyai-config
            - name: SERVICE_STORAGE_FORMAT
              valueFrom:
                configMapKeyRef:
                  key: service_storage_format
                  name: trustyai-config
            - name: STORAGE_DATA_FOLDER
              valueFrom:
                configMapKeyRef:
                  key: storage_data_folder
                  name: trustyai-config
            - name: SERVICE_BATCH_SIZE
              valueFrom:
                configMapKeyRef:
                  key: service_batch_size
                  name: trustyai-config
            - name: SERVICE_DATA_FORMAT
              valueFrom:
                configMapKeyRef:
                  key: service_data_format
                  name: trustyai-config
            - name: SERVICE_METRICS_SCHEDULE
              valueFrom:
                configMapKeyRef:
                  key: service_metrics_schedule
                  name: trustyai-config
          image: quay.io/trustyai/trustyai-service:onnx-patch
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/live
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          name: trustyai-service
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          volumeMounts:
            - mountPath: /inputs
              name: volume
              readOnly: false
      serviceAccountName: trustyai-serviceaccount

      volumes:
        - name: volume
          persistentVolumeClaim:
            claimName: trustyai-service-pvc
            readOnly: false

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: trustyai-serviceaccount
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: trustyai-role
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: trustyai-clusterrolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: trustyai-role
subjects:
  - kind: ServiceAccount
    name: trustyai-serviceaccount